#!/usr/bin/env python
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –î–ï–ö–õ–ê–†–ê–¢–ò–í–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ
"""
import json
import random
import re

class ArithmeticDeclarativeGenerator:
    def __init__(self):
        self.operators = ['+', '-', '*']
        self.operator_words = {'+': '–ø–ª—é—Å', '-': '–º–∏–Ω—É—Å', '*': '—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞'}
        print("Initialized ArithmeticDeclarativeGenerator.")

    def generate_arithmetic_expression(self, max_numbers=3):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        num_count = random.randint(2, max_numbers)
        numbers = [random.randint(1, 20) for _ in range(num_count)]
        operators = [random.choice(self.operators) for _ in range(num_count - 1)]
        
        # –°–æ–∑–¥–∞—ë–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        expression_parts = []
        for i in range(num_count):
            expression_parts.append(str(numbers[i]))
            if i < len(operators):
                expression_parts.append(self.operator_words[operators[i]])
        
        expression_text = " ".join(expression_parts)
        natural_question = f"—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {expression_text}"
        
        return {
            'numbers': numbers,
            'operators': operators,
            'expression_text': expression_text,
            'question': natural_question
        }

    def generate_declarative_output(self, arithmetic_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OBJECT/INTENT"""
        declarations = []
        numbers = arithmetic_data['numbers']
        operators = arithmetic_data['operators']
        
        object_counter = 1
        
        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —á–∏—Å–µ–ª –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for i in range(len(numbers)):
            # –û–±—ä–µ–∫—Ç –¥–ª—è —á–∏—Å–ª–∞
            declarations.append(f'OBJECT(name:"it{object_counter}",type:"virtual", count: "{numbers[i]}")')
            object_counter += 1
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞
            if i < len(operators):
                operator_action = f"it{object_counter-1} {operators[i]}"
                declarations.append(f'INTENT(name:"it{object_counter}",type:"virtual", action: "{operator_action}")')
                object_counter += 1
        
        # –û–±—ä–µ–∫—Ç-–≤–æ–ø—Ä–æ—Å
        declarations.append(f'OBJECT(name:"it{object_counter}",type:"virtual question", count: "?")')
        
        return declarations

    def generate_training_sample(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        arithmetic_data = self.generate_arithmetic_expression()
        declarations = self.generate_declarative_output(arithmetic_data)
        
        return {
            'text': arithmetic_data['question'],
            'declarations': declarations,
            'raw_expression': arithmetic_data['expression_text']
        }

    def generate_dataset(self, num_samples=500):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç"""
        dataset = []
        
        print(f"üî¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {num_samples} –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")
        
        for i in range(num_samples):
            sample = self.generate_training_sample()
            if sample:
                dataset.append(sample)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
                if i < 5:
                    print(f"\n--- –ü—Ä–∏–º–µ—Ä {i+1} ---")
                    print(f"–í–æ–ø—Ä–æ—Å: {sample['text']}")
                    print("–î–µ–∫–ª–∞—Ä–∞—Ü–∏–∏:")
                    for decl in sample['declarations']:
                        print(f"  {decl}")
        
        return dataset

def main():
    generator = ArithmeticDeclarativeGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    dataset = generator.generate_dataset(500)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è T5 (text-to-text)
    training_data = []
    for sample in dataset:
        # –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        input_text = f"convert to declarative: {sample['text']}"
        
        # –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç (–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)
        output_text = "\n".join(sample['declarations'])
        
        training_data.append({
            'text': input_text,
            'declarations_text': output_text,
            'raw_question': sample['text']
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_file = "arithmetic_declarative_training.jsonl"
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(training_data)} –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ {output_file}...")
    
    with open(output_file, 'w', encoding='utf-8') as f:
        for item in training_data:
            f.write(json.dumps(item, ensure_ascii=False) + '\n')
    
    print(f"‚úÖ –ì–û–¢–û–í–û! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(training_data)} –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤!")
    print(f"üìä –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –í—Ö–æ–¥: 'convert to declarative: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 –ø–ª—é—Å 3'")
    print(f"   –í—ã—Ö–æ–¥: 'OBJECT(name:\"it1\",type:\"virtual\", count: \"5\")\\nINTENT(...)'")
    print(f"üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞—É—á–∏—Ç—Å—è –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É –≤ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏!")

if __name__ == "__main__":
    main() 